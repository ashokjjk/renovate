{{- $settings := index (.Values.general | default (dict)) "require-pod-probes" | default (dict) }}
{{- if or $settings.enabled (and (not (hasKey $settings "enabled")) .Values.default.enabled) }}
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: require-pod-probes
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,StatefulSet
    policies.kyverno.io/title: Require Pod Probes
    policies.kyverno.io/category: Best Practices, EKS Best Practices
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/description: >-
      Liveness and readiness probes need to be configured to correctly manage a Pod's
      lifecycle during deployments, restarts, and upgrades. For each Pod, a periodic
      `livenessProbe` is performed by the kubelet to determine if the Pod's containers
      are running or need to be restarted. A `readinessProbe` is used by Services
      and Deployments to determine if the Pod is ready to receive network traffic.
      This policy validates that all containers have livenessProbe and readinessProbe defined.
spec:
  validationFailureAction: {{ default .Values.default.validationFailureAction $settings.validationFailureAction }}
  failurePolicy: {{ default .Values.default.failurePolicy $settings.failurePolicy }}
  admission: {{ default .Values.default.admission $settings.admission }}
  background: {{ default .Values.default.background $settings.background }}
  rules:
    - name: validate-probes
      skipBackgroundRequests: true
      match:
        any:
          - resources:
              kinds:
                - Pod
      {{- include "exclusions" $settings | nindent 6 }}
      preconditions:
        all:
          - key: "{{"{{request.operation || 'BACKGROUND'}}"}}"
            operator: AnyIn
            value:
              - CREATE
              - UPDATE
      validate:
        allowExistingViolations: true
        message: "Liveness and readiness probes are required for all containers."
        foreach:
          - list: request.object.spec.containers[]
            deny:
              conditions:
                all:
                  - key: livenessProbe
                    operator: AllNotIn
                    value: "{{"{{ element.keys(@)[] }}"}}"
                  - key: readinessProbe
                    operator: AllNotIn
                    value: "{{"{{ element.keys(@)[] }}"}}"
{{- end}}
